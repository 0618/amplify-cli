Resources:
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties: 
      IdentityPoolName: <%= props.identityPoolName %>
      AllowUnauthenticatedIdentities: <%= props.allowUnauthenticatedIdentities %>
  
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref 'IdentityPool'
      Roles:
        <%if (props.allowUnauthenticatedIdentities) { %>
          unauthenticated: <%= props.unAuthRoleArn %>
        <% } %>
          authenticated: <%= props.authRoleArn %>
    DependsOn: IdentityPool

  <%if (props.authSelections === 'identityPoolAndUserPool' && props.mfaConfiguration != 'OFF') { %>
  SNSRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: <%=props.roleName %>
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: ""
            Effect: "Allow"
            Principal: 
              Service: "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition: 
              StringEquals:
                sts:ExternalId: <%= props.roleExternalId %>
      Policies: 
        - 
          PolicyName: <%= props.policyName %>
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "sns:Publish"
                Resource: "*"
  <% } %>
  
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: <%= props.userPoolName %>
      Schema: 
        <% for(var i=0; i < props.requiredAttributes.length; i++) { %>
        -
          Name: <%= props.requiredAttributes[i] %>
          Required: true
        <% } %>
      Policies:
        PasswordPolicy:
          MinimumLength: <%= props.passwordPolicyMinLength %>
          RequireLowercase: <%= props.passwordPolicyCharacters.includes('Requires Lowercase') %>
          RequireNumbers: <%=  props.passwordPolicyCharacters.includes('Requires Numbers') %>
          RequireSymbols: <%= props.passwordPolicyCharacters.includes('Requires Symbols') %>
          RequireUppercase: <%= props.passwordPolicyCharacters.includes('Requires Uppercase') %>
      MfaConfiguration: '<%= props.mfaConfiguration %>'
      <%if (props.mfaConfiguration != 'OFF') { %>
      SmsAuthenticationMessage: <%= props.smsAuthenticationMessage %>
      SmsVerificationMessage: <%= props.smsVerificationMessage %>
      SmsConfiguration: 
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: <%= props.roleExternalId %>  
      <% } %>
    <%if (props.mfaConfiguration != 'OFF') { %>
    DependsOn: SNSRole
    <% } %>

  <% } %>
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: <%= props.userpoolClientName %>
      ExplicitAuthFlows: 
        <% for(var i=0; i < props.userpoolClientAuthFlow.length; i++) { %>
        - <%= props.userpoolClientAuthFlow[i] %>
        <% } %>
      <%if (props.userpoolClientSetAttributes) { %>
      ReadAttributes:
        <% for(var i=0; i < props.userpoolClientReadAttributes.length; i++) { %>
        - "<%= props.userpoolClientReadAttributes[i] %>"
        <% } %>
      WriteAttributes:
        <% for(var i=0; i < props.userpoolClientWriteAttributes.length; i++) { %>
        - "<%= props.userpoolClientWriteAttributes[i] %>"
        <% } %>
      <% } %>
      GenerateSecret: <%= props.userpoolClientGenerateSecret %>
      RefreshTokenValidity: <%= props.userpoolClientRefreshTokenValidity %>
      UserPoolId: !Ref UserPool
    DependsOn: UserPool
  <% } %> 
 
Outputs :
  IdentityPoolName:
    Value: !Ref 'IdentityPool'
    Description:  name for the identity pool
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPoolName:
    Value: !Ref 'UserPool'
    Description:  name for the user pool
  <% } %>
  <%if (props.authSelections === 'identityPoolAndUserPool' && props.mfaConfiguration != 'OFF') { %>
  CreatedSNSRole: 
    Value: !GetAtt SNSRole.Arn
    Description: role arn
  <% } %>