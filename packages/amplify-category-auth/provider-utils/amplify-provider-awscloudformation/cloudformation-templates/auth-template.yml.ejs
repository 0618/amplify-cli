Resources:
  <%if (props.mfaConfiguration != 'OFF') { %>
  # BEGIN SNS ROLE RESOURCE
  SNSRole: 
  # Created to allow the UserPool SMS Config to publish via the Simple Notification Service during MFA Process
    Type: AWS::IAM::Role
    Properties:
      RoleName: <%=props.roleName %>
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: ""
            Effect: "Allow"
            Principal: 
              Service: "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition: 
              StringEquals:
                sts:ExternalId: <%= props.roleExternalId %>
      Policies: 
        - 
          PolicyName: <%= props.policyName %>
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "sns:Publish"
                Resource: "*"
  <% } %>

  # BEGIN USER POOL RESOURCES
  UserPool:
  # Created upon user selection
  # Depends on SNS Role for Arn if MFA is enabled
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: <%= props.userPoolName %>
      Schema: 
        <% for(var i=0; i < props.requiredAttributes.length; i++) { %>
        -
          Name: <%= props.requiredAttributes[i] %>
          Required: true
        <% } %>
      <%if (props.autoVerifiedAttributes && props.autoVerifiedAttributes.length > 0) { %>
      AutoVerifiedAttributes:
        <% for(var i=0; i < props.autoVerifiedAttributes.length; i++) { %>
        - <%= props.autoVerifiedAttributes[i] %>
        <% } %> 
      <% } %>
      <%if (props.autoVerifiedAttributes.includes('email')) { %>
      EmailVerificationMessage: '<%= props.emailVerificationMessage %>'
      EmailVerificationSubject: '<%= props.emailVerificationSubject %>'
      <% } %>      
      Policies:
        PasswordPolicy:
          MinimumLength: <%= props.passwordPolicyMinLength %>
          RequireLowercase: <%= props.passwordPolicyCharacters.includes('Requires Lowercase') %>
          RequireNumbers: <%=  props.passwordPolicyCharacters.includes('Requires Numbers') %>
          RequireSymbols: <%= props.passwordPolicyCharacters.includes('Requires Symbols') %>
          RequireUppercase: <%= props.passwordPolicyCharacters.includes('Requires Uppercase') %>
      MfaConfiguration: '<%= props.mfaConfiguration %>'
      SmsVerificationMessage: '<%= props.smsVerificationMessage %>' 
      SmsConfiguration: 
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: <%= props.roleExternalId %>  
    <%if (props.mfaConfiguration != 'OFF') { %>      
    DependsOn: SNSRole
    <% } %>

  UserPoolClientWeb:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: <%= props.userpoolClientName %>Web
      <%if (props.userpoolClientSetAttributes) { %>
      ReadAttributes:
        <% for(var i=0; i < props.userpoolClientReadAttributes.length; i++) { %>
        - "<%= props.userpoolClientReadAttributes[i] %>"
        <% } %>
      WriteAttributes:
        <% for(var i=0; i < props.userpoolClientWriteAttributes.length; i++) { %>
        - "<%= props.userpoolClientWriteAttributes[i] %>"
        <% } %>
      <% } %>
      RefreshTokenValidity: <%= props.userpoolClientRefreshTokenValidity %>
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  UserPoolClient:
  # Created provide application access to user pool
  # Depends on UserPool for ID reference
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: <%= props.userpoolClientName %>
      <%if (props.userpoolClientSetAttributes) { %>
      ReadAttributes:
        <% for(var i=0; i < props.userpoolClientReadAttributes.length; i++) { %>
        - "<%= props.userpoolClientReadAttributes[i] %>"
        <% } %>
      WriteAttributes:
        <% for(var i=0; i < props.userpoolClientWriteAttributes.length; i++) { %>
        - "<%= props.userpoolClientWriteAttributes[i] %>"
        <% } %>
      <% } %>
      GenerateSecret: <%= props.userpoolClientGenerateSecret %>
      RefreshTokenValidity: <%= props.userpoolClientRefreshTokenValidity %>
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  # BEGIN USER POOL LAMBDA RESOURCES
  UserPoolClientRole:
  # Created to execute Lambda which gets userpool app client config values
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%= props.userpoolClientLambdaRole %>      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
    DependsOn: UserPoolClient

  UserPoolClientLambda:
  # Lambda which gets userpool app client config values
  # Depends on UserPool for id
  # Depends on UserPoolClientRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   }'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'   
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILURE, {err});'
            - '     })'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - UserPoolClientRole
        - Arn
    DependsOn: UserPoolClientRole

  UserPoolClientLambdaPolicy:
  # Sets userpool policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.userpoolClientLambdaPolicy %>
      Roles: 
        - <%= props.userpoolClientLambdaRole %>
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:DescribeUserPoolClient'
            Resource: !GetAtt UserPool.Arn
    DependsOn: UserPoolClientLambda

  UserPoolClientLogPolicy:
  # Sets log policy for the role that executes the Userpool Client Lambda
  # Depends on UserPool for Arn
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.userpoolClientLogPolicy %>
      Roles: 
        - <%= props.userpoolClientLambdaRole %>
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref UserPoolClientLambda}
    DependsOn: UserPoolClientLambdaPolicy  

  UserPoolClientInputs:
  # Values passed to Userpool client Lambda
  # Depends on UserPool for Id
  # Depends on UserPoolClient for Id
  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt UserPoolClientLambda.Arn
      clientId: !Ref UserPoolClient
      userpoolId: !Ref UserPool
    DependsOn: UserPoolClientLogPolicy


  <%if (props.mfaConfiguration != 'OFF') { %>
  # BEGIN MFA LAMBDA RESOURCES
  MFALambdaRole:
  # Created to execute Lambda which sets MFA config values
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%= props.mfaLambdaRole %>      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: <%= props.mfaPassRolePolicy %>
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: <%= `arn:aws:iam:::role/${props.mfaLambdaRole}` %>

  MFALambda:
  # Lambda which sets MFA config values
  # Depends on MFALambdaRole for role ARN
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - '   const totpParams = {'
            - '     UserPoolId: event.ResourceProperties.userPoolId,'
            - '     MfaConfiguration: event.ResourceProperties.mfaConfiguration,'
            - '     SmsMfaConfiguration: {'
            - '       SmsAuthenticationMessage: event.ResourceProperties.smsAuthenticationMessage,'
            - '       SmsConfiguration: {'
            - '         SnsCallerArn: event.ResourceProperties.smsConfigCaller,'
            - '         ExternalId: event.ResourceProperties.smsConfigExternalId'
            - '       }'
            - '     },'
            - '     SoftwareTokenMfaConfiguration: {Enabled: event.ResourceProperties.totpEnabled.toLowerCase() === "true" ? true : false}'
            - '   }'
            - '   identity.setUserPoolMfaConfig(totpParams).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {res});'   
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILURE, {err});'
            - '     })'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - MFALambdaRole
        - Arn
    DependsOn: MFALambdaRole

  MFALambdaPolicy:
  # Sets policy for the role that executes the MFA Lambda
  # Depends on Userpool for Arn
  # Marked as depending on MFALambda for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.mfaLambdaIAMPolicy %>
      Roles: 
        - <%= props.mfaLambdaRole %>
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:SetUserPoolMfaConfig'
            Resource: !GetAtt UserPool.Arn
    DependsOn: MFALambda


  MFALogPolicy:
  # Sets log policy for the role that executes the MFA Lambda
  # Marked as depending on MFALambdaPolicy for easier to understand CFN sequencing
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.mfaLambdaLogPolicy %>
      Roles: 
        - <%= props.mfaLambdaRole %>
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub  
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref MFALambda}
    DependsOn: MFALambdaPolicy  

  MFALambdaInputs:
  # Values passed to MFA Lambda
  # Depends on UserPool for Arn
  # Depends on MFALambda for Arn
  # Marked as depending on MFALambdaPolicy for easier to understand CFN sequencing
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt MFALambda.Arn
      userPoolId: !Ref UserPool
      mfaConfiguration: '<%= props.mfaConfiguration %>'
      totpEnabled: <%= props.mfaTypes.includes('TOTP') %>
      smsConfigCaller: !GetAtt SNSRole.Arn
      smsAuthenticationMessage: '<%= props.smsAuthenticationMessage %>'
      smsConfigExternalId: <%= props.roleExternalId %>  
    DependsOn: MFALogPolicy
  <% } %>

  <%if (props.authSelections !== 'userPoolOnly') { %>
  # BEGIN IDENTITY POOL RESOURCES
  IdentityPool:
  # Always created
    Type: AWS::Cognito::IdentityPool
    Properties: 
      IdentityPoolName: <%= props.identityPoolName %>
      CognitoIdentityProviders:
        - ClientId:  !Ref UserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
        - ClientId:  !Ref UserPoolClientWeb
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
      <%if (props.selectedParties && Object.keys(props.selectedParties).length > 0) { %>
      SupportedLoginProviders: 
        <% for(var i=0; i < Object.keys(props.selectedParties).length; i++) { %>
          <%= Object.keys(props.selectedParties)[i] %>: '<%= Object.values(props.selectedParties)[i]%>'
        <% } %> 
      <% } %>
      AllowUnauthenticatedIdentities: <%= props.allowUnauthenticatedIdentities %>
  
  IdentityPoolRoleMap:
  # Created to map Auth and Unauth roles to the identity pool
  # Depends on Identity Pool for ID ref
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref 'IdentityPool'
      Roles:
          unauthenticated: <%= props.unAuthRoleArn %>
          authenticated: <%= props.authRoleArn %>
    DependsOn: IdentityPool
  <% } %>

Outputs :
  <%if (props.authSelections !== 'userPoolOnly') { %>
  IdentityPoolName:
    Value: !Ref 'IdentityPool'
    Description:  name for the identity pool
  <% } %>
  UserPoolName:
    Value: !Ref 'UserPool'
    Description:  Name for the user pool
  AppClientIDWeb:
    Value: !Ref 'UserPoolClientWeb'
    Description: The user pool app client id for web
  AppClientID:
    Value: !Ref 'UserPoolClient'
    Description: The user pool app client id
  AppClientSecret:
    Value: !GetAtt UserPoolClientInputs.appSecret
  <%if (props.mfaConfiguration != 'OFF') { %>
  CreatedSNSRole: 
    Value: !GetAtt SNSRole.Arn
    Description: role arn
  <% } %>