Resources:

  <%if (props.mfaConfiguration != 'OFF') { %>
  MFALambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%= props.totpLambdaRole %>      
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: <%= props.totpLambdaLogPolicy %>
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:*:*:*'
      - PolicyName: <%= props.totpPassRolePolicy %>
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'iam:PassRole'
              Resource: '*'
    DependsOn: UserPool

  MFALambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const identity = new aws.CognitoIdentityServiceProvider();'
            - 'exports.handler = (event, context, callback) => {'
            - '   const params = {'
            - '     UserPoolId: event.ResourceProperties.userPoolId,'
            - '     MfaConfiguration: event.ResourceProperties.mfaConfiguration,'
            - '     SmsConfiguration: {'
            - '       SnsCallerArn: event.ResourceProperties.snsCallArn,'
            - '       ExternalId: event.ResourceProperties.snsExternalId'
            - '     },'
            - '     SmsAuthenticationMessage: event.ResourceProperties.smsAuthenticationMessage,'
            - '     SmsVerificationMessage: event.ResourceProperties.smsVerificationMessage,'
            - '   };'
            - '   identity.updateUserPool(params).promise()'
            - '     .then((updateUserPoolResponse) => {'
            - '       const totpParams = {'
            - '         UserPoolId: event.ResourceProperties.userPoolId,'
            - '         SoftwareTokenMfaConfiguration: {Enabled: event.ResourceProperties.totpEnabled}'
            - '       }'
            - '       identity.setUserPoolMfaConfig(totpParams).promise()'
            - '         .then((setUserPoolMfaConfigResponse) => {'
            - '           response.send(event, context, response.SUCCESS, {updateUserPoolResponse, setUserPoolMfaConfigResponse});'   
            - '         })'
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILURE, {err: err});'
            - '       throw err;'
            - '     });'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - MFALambdaExecutionRole
        - Arn
    DependsOn: MFALambdaExecutionRole


  MFALambdaIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.totpLambdaIAMPolicy %>
      Roles: 
        - <%= props.totpLambdaRole %>
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:UpdateUserPool'
              - 'cognito-idp:SetUserPoolMfaConfig'
            Resource: !GetAtt UserPool.Arn
    DependsOn: MFALambda


  MFALambdaFunctionInputs:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt MFALambda.Arn
      userPoolId: !Ref UserPool
      mfaConfiguration: '<%= props.mfaConfiguration %>'
      totpEnabled: <%= props.mfaTypes.includes('TOTP')  %>
      <%if (props.mfaConfiguration != 'OFF' && props.mfaTypes.includes('SMS Text Message')) { %>
      snsCallArn: !GetAtt SNSRole.Arn
      snsExternalId: <%= props.roleExternalId %>
      smsAuthenticationMessage: <%= props.smsAuthenticationMessage %>
      smsVerificationMessage: <%= props.smsVerificationMessage %>
      <% } %>
    DependsOn: MFALambdaIAMPolicy

  <% } %>

  <%if (props.authProviders && props.authProviders.length > 0) { %>
  FederatedLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%= props.federatedIDLambdaRole %>
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
      - PolicyName: <%= props.lambdaLogPolicy %>
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: 'arn:aws:logs:*:*:*'
  FederatedIDLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const cognitoIdentity = new aws.CognitoIdentity();'
            - 'exports.handler = (event, context, callback) => {'
            - ' const providerMap = JSON.parse(event.ResourceProperties.supportedLoginProviders);'
            - '   const params = {'
            - '     AllowUnauthenticatedIdentities: true,'
            - '     IdentityPoolId: event.ResourceProperties.identityPoolId,'
            - '     IdentityPoolName: event.ResourceProperties.identityPoolName,'
            - '     SupportedLoginProviders: providerMap'
            - '   };'
            - '   cognitoIdentity.updateIdentityPool(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {res: res});'   
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILURE, {err: err});'
            - '       throw err;'
            - '     });'

            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - FederatedLambdaExecutionRole
        - Arn
    DependsOn: FederatedLambdaExecutionRole

  FederatedLambdaIAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: <%= props.federatedLambdaIAMPolicy %>
      Roles: 
        - <%= props.federatedIDLambdaRole %>
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-identity:UpdateIdentityPool'
            Resource: !Sub
              - arn:aws:cognito-identity:${region}:${account}:identitypool/${idpool}
              - { region: !Ref "AWS::Region", account: !Ref "AWS::AccountId", idpool: !Ref IdentityPool}
    DependsOn: FederatedIDLambda

  FederatedLambdaFunctionInputs:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt FederatedIDLambda.Arn
      identityPoolId: !Ref IdentityPool
      identityPoolName: !GetAtt IdentityPool.Name
      supportedLoginProviders: '<%- JSON.stringify(props.selectedParties) %>'
    DependsOn: FederatedLambdaIAMPolicy

  <% } %>

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties: 
      IdentityPoolName: <%= props.identityPoolName %>
      AllowUnauthenticatedIdentities: <%= props.allowUnauthenticatedIdentities %>
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref 'IdentityPool'
      Roles:
        <%if (props.allowUnauthenticatedIdentities) { %>
          unauthenticated: <%= props.unAuthRoleArn %>
        <% } %>
          authenticated: <%= props.authRoleArn %>
    DependsOn: IdentityPool


  <%if (props.authSelections === 'identityPoolAndUserPool' && props.mfaConfiguration != 'OFF') { %>
  SNSRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: <%=props.roleName %>
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: ""
            Effect: "Allow"
            Principal: 
              Service: "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition: 
              StringEquals:
                sts:ExternalId: <%= props.roleExternalId %>
      Policies: 
        - 
          PolicyName: <%= props.policyName %>
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "sns:Publish"
                Resource: "*"
  <% } %>
  
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: <%= props.userPoolName %>
      Schema: 
        <% for(var i=0; i < props.requiredAttributes.length; i++) { %>
        -
          Name: <%= props.requiredAttributes[i] %>
          Required: true
        <% } %>
      Policies:
        PasswordPolicy:
          MinimumLength: <%= props.passwordPolicyMinLength %>
          RequireLowercase: <%= props.passwordPolicyCharacters.includes('Requires Lowercase') %>
          RequireNumbers: <%=  props.passwordPolicyCharacters.includes('Requires Numbers') %>
          RequireSymbols: <%= props.passwordPolicyCharacters.includes('Requires Symbols') %>
          RequireUppercase: <%= props.passwordPolicyCharacters.includes('Requires Uppercase') %>
    <%if (props.mfaConfiguration != 'OFF') { %>
    DependsOn: SNSRole
    <% } %>

  <% } %>
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: <%= props.userpoolClientName %>
      ExplicitAuthFlows: 
        <% for(var i=0; i < props.userpoolClientAuthFlow.length; i++) { %>
        - <%= props.userpoolClientAuthFlow[i] %>
        <% } %>
      <%if (props.userpoolClientSetAttributes) { %>
      ReadAttributes:
        <% for(var i=0; i < props.userpoolClientReadAttributes.length; i++) { %>
        - "<%= props.userpoolClientReadAttributes[i] %>"
        <% } %>
      WriteAttributes:
        <% for(var i=0; i < props.userpoolClientWriteAttributes.length; i++) { %>
        - "<%= props.userpoolClientWriteAttributes[i] %>"
        <% } %>
      <% } %>
      GenerateSecret: <%= props.userpoolClientGenerateSecret %>
      RefreshTokenValidity: <%= props.userpoolClientRefreshTokenValidity %>
      UserPoolId: !Ref UserPool
    DependsOn: UserPool
  <% } %> 
 
Outputs :

  <%if (props.authProviders && props.authProviders.length > 0) { %>
  Lambda:
    Value: !GetAtt FederatedIDLambda.Arn
    Description: Lambda Arn
  <% } %>
  IdentityPoolName:
    Value: !Ref 'IdentityPool'
    Description:  name for the identity pool
  <%if (props.authSelections === 'identityPoolAndUserPool') { %>
  UserPoolName:
    Value: !Ref 'UserPool'
    Description:  name for the user pool
  <% } %>
  <%if (props.authSelections === 'identityPoolAndUserPool' && props.mfaConfiguration != 'OFF') { %>
  CreatedSNSRole: 
    Value: !GetAtt SNSRole.Arn
    Description: role arn
  <% } %>