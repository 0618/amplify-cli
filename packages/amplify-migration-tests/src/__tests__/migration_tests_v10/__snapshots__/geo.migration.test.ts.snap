// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`geo category migration from v10 to latest ...pull and push should not drift with new amplify version 1`] = `
"Resources
[~] AWS::Lambda::Function UserPoolClientLambda 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then(res => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch(err => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then((res) => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch((err) => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Cognito::IdentityPoolRoleAttachment IdentityPoolRoleMap 
 ├─ [+] RoleMappings
 │   └─ {\\"UserPoolClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${client}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"client\\":{\\"Ref\\":\\"UserPoolClient\\"}}]},\\"Type\\":\\"Token\\"},\\"UserPoolWebClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${webClient}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"webClient\\":{\\"Ref\\":\\"UserPoolClientWeb\\"}}]},\\"Type\\":\\"Token\\"}}
 └─ [~] DependsOn
     └─ @@ -1,3 +1,5 @@
        [ ] [
        [-]   \\"IdentityPool\\"
        [+]   \\"IdentityPool\\",
        [+]   \\"UserPoolClient\\",
        [+]   \\"UserPoolClientWeb\\"
        [ ] ]

IAM Statement Changes
┌───┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬──────────────────────┬────────────────────────────┬───────────┐
│   │ Resource                                                                                                                                           │ Effect │ Action               │ Principal                  │ Condition │
├───┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼──────────────────────┼────────────────────────────┼───────────┤
│ - │ {\\"Fn::Sub\\":[\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/\${lambdaName}:log-stream:*\\",{\\"lambdaName\\":\\"\${RoleMapFunction}\\"}]} │ Allow  │ logs:CreateLogGroup  │ AWS:\${LambdaExecutionRole} │           │
│   │                                                                                                                                                    │        │ logs:CreateLogStream │                            │           │
│   │                                                                                                                                                    │        │ logs:PutLogEvents    │                            │           │
└───┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴──────────────────────┴────────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Resources
[-] AWS::IAM::Role LambdaExecutionRole destroy
[-] AWS::Lambda::Function RoleMapFunction destroy
[-] AWS::IAM::Policy LambdaCloudWatchPolicy destroy
[-] Custom::LambdaCallout RoleMapFunctionInput destroy

"
`;

exports[`geo category migration from v10 to latest ...pull and push should not drift with new amplify version 2`] = `
"Resources
[~] AWS::Lambda::Function UserPoolClientLambda 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then(res => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch(err => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  if (event.RequestType == 'Delete') {
    response.send(event, context, response.SUCCESS, {});
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    const params = {
      ClientId: event.ResourceProperties.clientId,
      UserPoolId: event.ResourceProperties.userpoolId,
    };
    identity
      .describeUserPoolClient(params)
      .promise()
      .then((res) => {
        response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
      })
      .catch((err) => {
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Cognito::IdentityPoolRoleAttachment IdentityPoolRoleMap 
 ├─ [+] RoleMappings
 │   └─ {\\"UserPoolClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${client}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"client\\":{\\"Ref\\":\\"UserPoolClient\\"}}]},\\"Type\\":\\"Token\\"},\\"UserPoolWebClientRoleMapping\\":{\\"AmbiguousRoleResolution\\":\\"AuthenticatedRole\\",\\"IdentityProvider\\":{\\"Fn::Sub\\":[\\"cognito-idp.\${region}.amazonaws.com/\${userPool}:\${webClient}\\",{\\"region\\":{\\"Ref\\":\\"AWS::Region\\"},\\"userPool\\":{\\"Ref\\":\\"UserPool\\"},\\"webClient\\":{\\"Ref\\":\\"UserPoolClientWeb\\"}}]},\\"Type\\":\\"Token\\"}}
 └─ [~] DependsOn
     └─ @@ -1,3 +1,5 @@
        [ ] [
        [-]   \\"IdentityPool\\"
        [+]   \\"IdentityPool\\",
        [+]   \\"UserPoolClient\\",
        [+]   \\"UserPoolClientWeb\\"
        [ ] ]

IAM Statement Changes
┌───┬────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬──────────────────────┬────────────────────────────┬───────────┐
│   │ Resource                                                                                                                                           │ Effect │ Action               │ Principal                  │ Condition │
├───┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼──────────────────────┼────────────────────────────┼───────────┤
│ - │ {\\"Fn::Sub\\":[\\"arn:aws:logs:\${AWS::Region}:\${AWS::AccountId}:log-group:/aws/lambda/\${lambdaName}:log-stream:*\\",{\\"lambdaName\\":\\"\${RoleMapFunction}\\"}]} │ Allow  │ logs:CreateLogGroup  │ AWS:\${LambdaExecutionRole} │           │
│   │                                                                                                                                                    │        │ logs:CreateLogStream │                            │           │
│   │                                                                                                                                                    │        │ logs:PutLogEvents    │                            │           │
└───┴────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴──────────────────────┴────────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Resources
[-] AWS::IAM::Role LambdaExecutionRole destroy
[-] AWS::Lambda::Function RoleMapFunction destroy
[-] AWS::IAM::Policy LambdaCloudWatchPolicy destroy
[-] Custom::LambdaCallout RoleMapFunctionInput destroy

"
`;
