// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v12: amplify add auth... ...should init an Js project and add Oauth settings with userpool 1`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateUserPoolDomain   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteUserPoolDomain   │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DescribeUserPool       │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateIdentityProvider │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteIdentityProvider │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders  │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteUserPoolDomain   │ AWS:\${UserPoolClientRole} │           │
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteIdentityProvider │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[+] AWS::Cognito::UserPoolDomain HostedUIDomainResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIFacebookProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIGoogleProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUILoginWithAmazonProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUISignInWithAppleProviderResource 
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,8 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [+]   "HostedUISignInWithAppleProviderResource",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,8 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [+]   "HostedUISignInWithAppleProviderResource",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;

  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };

  //   2023-06-09T18:28:59.069Z	c345e07c-9e65-4e13-9258-88269c9eaa85	INFO	InvalidParameterException: No such domain or user pool exists.
  //     at Request.extractError (/var/runtime/node_modules/aws-sdk/lib/protocol/json.js:61:27)
  //     at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:106:20)
  //     at Request.emit (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:78:10)
  //     at Request.emit (/var/runtime/node_modules/aws-sdk/lib/request.js:686:14)
  //     at Request.transition (/var/runtime/node_modules/aws-sdk/lib/request.js:22:10)
  //     at AcceptorStateMachine.runTo (/var/runtime/node_modules/aws-sdk/lib/state_machine.js:14:12)
  //     at /var/runtime/node_modules/aws-sdk/lib/state_machine.js:26:10
  //     at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:38:9)
  //     at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:688:12)
  //     at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:116:18) {
  //   code: 'InvalidParameterException',
  //   time: 2023-06-09T18:28:58.980Z,
  //   requestId: '14ba817f-1ad9-4cfe-80c1-d5b9906747ac',
  //   statusCode: 400,
  //   retryable: false,
  //   retryDelay: 53.16190789510485
  // }

  deleteUserPoolDomain(inputDomainName)
    .then(() => {
      response.send(event, context, response.SUCCESS);
    })
    .catch((err) => {
      console.log(err);

      if (err.name === 'NotFoundException' || err.message === 'No such domain or user pool exists.') {
        return response.send(event, context, response.SUCCESS);
      }

      response.send(event, context, response.FAILED, { err });
    });
};

[~] AWS::IAM::Policy HostedUICustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateUserPoolDomain",
            [-]     "cognito-idp:DescribeUserPool",
            [ ]     "cognito-idp:DeleteUserPoolDomain"
            [ ]   ],
            [ ]   "Resource": {
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);

    const deleteIdentityProvider = (providerName) => {
      const params = { ProviderName: providerName, UserPoolId: userPoolId };
      return identity.deleteIdentityProvider(params).promise();
    };

    // const deleteSuccessOrNotFound = (promiseResult) => {
    //   return promiseResult.status === 'fulfilled' || promiseResult.reason.toString().match(/NotFoundException/);
    // };

    // const providerPromises = [];
    let failed = false;
    let count = 0;

    // Only 1 update can be sent at a time, so the SDK calls need to be run synchronously
    hostedUIProviderMeta.forEach(async ({ ProviderName }) => {
      await deleteIdentityProvider(ProviderName).then(() => {
        // console.log('successfully deleted', ProviderName);
      }).catch((error) => {
        if (!error?.code?.toString()?.match(/NotFoundException/)) {
          response.send(event, context, response.FAILED, error);
          // failed = true;
          // count++;
          return error;
        } else {
          console.log('not found', ProviderName);
        }
      });
    });

    // if (!failed) {
    response.send(event, context, response.SUCCESS);
    // } else {
    //   response.send(event, context, response.FAILED, count);
    // }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

[~] AWS::IAM::Policy HostedUIProvidersCustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateIdentityProvider",
            [-]     "cognito-idp:UpdateIdentityProvider",
            [ ]     "cognito-idp:ListIdentityProviders",
            [ ]     "cognito-idp:DeleteIdentityProvider"
            [ ]   ],

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

exports[`v12: amplify add auth... ...should init an Js project and add Oauth settings with userpool 2`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateUserPoolDomain   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteUserPoolDomain   │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DescribeUserPool       │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateIdentityProvider │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteIdentityProvider │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders  │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteUserPoolDomain   │ AWS:\${UserPoolClientRole} │           │
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteIdentityProvider │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Parameters
[+] Parameter facebookAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter googleAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleClientIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleKeyIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithapplePrivateKeyUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleTeamIdUserPool: {"Type":"String","NoEcho":true}

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[+] AWS::Cognito::UserPoolDomain HostedUIDomainResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIFacebookProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIGoogleProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUILoginWithAmazonProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUISignInWithAppleProviderResource 
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,8 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [+]   "HostedUISignInWithAppleProviderResource",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,8 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [+]   "HostedUISignInWithAppleProviderResource",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;

  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };

  //   2023-06-09T18:28:59.069Z	c345e07c-9e65-4e13-9258-88269c9eaa85	INFO	InvalidParameterException: No such domain or user pool exists.
  //     at Request.extractError (/var/runtime/node_modules/aws-sdk/lib/protocol/json.js:61:27)
  //     at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:106:20)
  //     at Request.emit (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:78:10)
  //     at Request.emit (/var/runtime/node_modules/aws-sdk/lib/request.js:686:14)
  //     at Request.transition (/var/runtime/node_modules/aws-sdk/lib/request.js:22:10)
  //     at AcceptorStateMachine.runTo (/var/runtime/node_modules/aws-sdk/lib/state_machine.js:14:12)
  //     at /var/runtime/node_modules/aws-sdk/lib/state_machine.js:26:10
  //     at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:38:9)
  //     at Request.<anonymous> (/var/runtime/node_modules/aws-sdk/lib/request.js:688:12)
  //     at Request.callListeners (/var/runtime/node_modules/aws-sdk/lib/sequential_executor.js:116:18) {
  //   code: 'InvalidParameterException',
  //   time: 2023-06-09T18:28:58.980Z,
  //   requestId: '14ba817f-1ad9-4cfe-80c1-d5b9906747ac',
  //   statusCode: 400,
  //   retryable: false,
  //   retryDelay: 53.16190789510485
  // }

  deleteUserPoolDomain(inputDomainName)
    .then(() => {
      response.send(event, context, response.SUCCESS);
    })
    .catch((err) => {
      console.log(err);

      if (err.name === 'NotFoundException' || err.message === 'No such domain or user pool exists.') {
        return response.send(event, context, response.SUCCESS);
      }

      response.send(event, context, response.FAILED, { err });
    });
};

[~] AWS::IAM::Policy HostedUICustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateUserPoolDomain",
            [-]     "cognito-idp:DescribeUserPool",
            [ ]     "cognito-idp:DeleteUserPoolDomain"
            [ ]   ],
            [ ]   "Resource": {
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);

    const deleteIdentityProvider = (providerName) => {
      const params = { ProviderName: providerName, UserPoolId: userPoolId };
      return identity.deleteIdentityProvider(params).promise();
    };

    // const deleteSuccessOrNotFound = (promiseResult) => {
    //   return promiseResult.status === 'fulfilled' || promiseResult.reason.toString().match(/NotFoundException/);
    // };

    // const providerPromises = [];
    let failed = false;
    let count = 0;

    // Only 1 update can be sent at a time, so the SDK calls need to be run synchronously
    hostedUIProviderMeta.forEach(async ({ ProviderName }) => {
      await deleteIdentityProvider(ProviderName).then(() => {
        // console.log('successfully deleted', ProviderName);
      }).catch((error) => {
        if (!error?.code?.toString()?.match(/NotFoundException/)) {
          response.send(event, context, response.FAILED, error);
          // failed = true;
          // count++;
          return error;
        } else {
          console.log('not found', ProviderName);
        }
      });
    });

    // if (!failed) {
    response.send(event, context, response.SUCCESS);
    // } else {
    //   response.send(event, context, response.FAILED, count);
    // }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

[~] AWS::IAM::Policy HostedUIProvidersCustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateIdentityProvider",
            [-]     "cognito-idp:UpdateIdentityProvider",
            [ ]     "cognito-idp:ListIdentityProviders",
            [ ]     "cognito-idp:DeleteIdentityProvider"
            [ ]   ],

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;
