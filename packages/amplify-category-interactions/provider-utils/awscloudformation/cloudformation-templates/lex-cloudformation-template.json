{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lex chatbot creation from Amplify CLI",
    "Parameters": {
        "inputs": {
            "Type": "String"
        },
        "roleName": {
            "Type": "String"
        },
        "cloudWatchPolicyName": {
            "Type": "String"
        },
        "lexPolicyName": {
            "Type": "String"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Creating lex chatbot"
                    },
                    "Parameters": [
                        "inputs"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "roleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Ref": "cloudWatchPolicyName"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Ref": "lexPolicyName"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "mobileanalytics:*",
                                        "mobiletargeting:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LexFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "const aws = require('aws-sdk');",
                                "const pinpoint = new aws.Pinpoint({ apiVersion: '2016-12-01' });",
                                "exports.handler = function(event, context) {",
                                "    if (event.RequestType == 'Delete') {",
                                "        response.send(event, context, response.SUCCESS);",
                                "        return;",
                                "    }",
                                "    const inputs = JSON.parse(event.ResourceProperties.inputs);",
                                "    let responseData = {};",
                                "    const params = {",
                                "        CreateApplicationRequest: {",
                                "            Name: appName",
                                "        }",
                                "    };",
                                "    return pinpoint.createApp(params).promise()",
                                "        .then((res) => {",
                                "            responseData = res.ApplicationResponse;",
                                "            response.send(event, context, response.SUCCESS, responseData);",
                                "         }).catch((err) => {",
                                "            console.log(err.stack);",
                                "            responseData = {Error: err};",
                                "            response.send(event, context, response.FAILED, responseData);",
                                "            throw err;",
                                "        });",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs6.10",
                "Timeout": "300",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                }
            }
        },
        "PinpointFunctionOutputs": {
            "Type": "Custom::LambdaCallout",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "PinpointFunction",
                        "Arn"
                    ]
                },
                "appName": {
                    "Ref": "appName"
                }
            }
        }
    },
    "Outputs": {
        "Region": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "Id": {
            "Value": {
                "Fn::GetAtt": [
                    "PinpointFunctionOutputs",
                    "Id"
                ]
            }
        },
        "appName": {
            "Value": {
                "Fn::GetAtt": [
                    "PinpointFunctionOutputs",
                    "Name"
                ]
            }
        }
    }
}