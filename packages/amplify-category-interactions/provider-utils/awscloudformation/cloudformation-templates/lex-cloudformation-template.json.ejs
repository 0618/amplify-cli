{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lex chatbot creation from Amplify CLI",
    "Parameters": {
        "lexPolicyName": {
            "Type": "String"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Creating lex chatbot"
                    },
                    "Parameters": [
                        "inputs"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "roleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Ref": "<%= props.lexPolicyName %>"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lex:*"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "LexFunction",
                                            "Arn"
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LexFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "const aws = require('aws-sdk');",
                                "const lex = new aws.LexModelBuildingService({ apiVersion: '2017-04-19' });",
                                "exports.handler = function(event, context) {",
                                "    if (event.RequestType == 'Delete') {",
                                "        response.send(event, context, response.SUCCESS);",
                                "        return;",
                                "    }",
                                "    let newSlotTypeParams = [",
                                        <% for(var i = 0; i < props.intents.length; i++) { %>
                                        <% for(var j = 0; j < props.intents[i].newSlotTypes.length; j++) { %>
                                "        {",
                                "            'name': '<%= props.intents[i].newSlotTypes[j].slotType %>',",
                                "            'description': '<%= props.intents[i].newSlotTypes[j].slotTypeDescription %>',",
                                "            'enumerationValues': [",
                                                <% for(var k = 0; k < props.intents[i].newSlotTypes[j].slotValues.length; k++) { %>
                                "                {",
                                "                    'value': '<%= props.intents[i].newSlotTypes[j].slotValues[k] %>'",
                                "                },",
                                                <% } %>
                                "            ]",
                                "        },",
                                        <% } %> 
                                        <% } %>
                                "    ];",
                                "    let intentParams = [",
                                        <% for(var i = 0; i < props.intents.length; i++) { %>
                                "        {",
                                "            'name': '<%= props.intents[i].intentName %>',",
                                            <% if(props.intents[i].confirmationQuestion) { %>
                                "            'confirmationPrompt': {",
                                "                'maxAttempts': 2, ",
                                "                'messages': [",
                                "                    {",
                                "                        'content': '<%= props.intents[i].confirmationQuestion %>', ",
                                "                        'contentType': 'PlainText'",
                                "                    }",
                                "                ]",
                                "            }, ",
                                            <% } %>
                                            <% if(props.intents[i].cancelMessage) { %>
                                "            'rejectionStatement': {",
                                "                'messages': [",
                                "                    {",
                                "                    'content': '<%= props.intents[i].cancelMessage %>', ",
                                "                    'contentType': 'PlainText'",
                                "                    }",
                                "                ]",
                                "            }, ",
                                        <% } %>
                                "            'sampleUtterances': [",
                                            <% for(var j = 0; j < props.intents[i].utterances.length; j++) { %>
                                "                '<%= props.intents[i].utterances[j] %>',",
                                            <% } %>
                                "            ],",
                                        <% if(props.intents[i].pathsAnswers) { %>
                                "            'fulfillmentActivity': {",
                                "                'type': 'CodeHook',",
                                "                'codeHook': {",
                                "                    'messageVersion': '$LATEST',",
                                "                    'uri': '<%= props.intents[i].pathsAnswers.paths[0].lambdaArn %>'",
                                "                }",
                                "            }, ",
                                        <% } else { %>
                                "            'fulfillmentActivity': {",
                                "                'type': 'ReturnIntent'",
                                "            },",
                                        <% } %>
                                "            'slots': [",
                                                <% for(var j = 0; j < props.intents[i].slots.length; j++) { %>
                                "                {",
                                "                    'name': '<%= props.intents[i].slots[j].name %>',",
                                "                    'slotConstraint': <% if(props.intents[i].slots[j].required) { %>'Required'<% } else { %>'Optional'<% } %>,",
                                "                    'priority': <%= j %>,",
                                "                    'slotType': '<%= props.intents[i].slots[j].type %>',",
                                "                    'slotTypeVersion': '$LATEST',"
                                "                    'valueElicitationPrompt': {",
                                "                        'maxAttempts': 3,",
                                "                        'messages': [",
                                "                            {",
                                "                                'content': '<%= props.intents[i].slots[j].prompt %>',",
                                "                                'contentType': 'PlainText'",
                                "                            }",
                                "                        ]",
                                "                    }",
                                "                },",
                                                <% } %>
                                "            ]",
                                "        },",
                                        <% } %>
                                "    ];",
                                "    let botParams = {",
                                "        'name': '<%= props.botName %>',",
                                "        'intents': [",
                                        <% for(var i = 0; i < props.intents.length; i++) { %>,
                                "            {",
                                "                'intentName': '<%= props.intents[i].intentName %>',",
                                "                'intentVersion': '$LATEST'",
                                "            }",
                                        <% } %>
                                "        ],",
                                "        'childDirected': <%= props.coppa %>,",
                                "        'locale': 'en-US',",
                                "        'abortStatement': {",
                                "            'messages': [",
                                "                {",
                                "                    'content': 'I don\'t understand. Can you try again?', ",
                                "                    'contentType': 'PlainText'",
                                "                }, ",
                                "                {",
                                "                    'content': 'I\'m sorry, I don\'t understand.', ",
                                "                    'contentType': 'PlainText'",
                                "                }",
                                "            ]",
                                "        }, ",
                                "        'clarificationPrompt': {",
                                "            'maxAttempts': 3, ",
                                "            'messages': [",
                                "                {",
                                "                    'content': 'I\'m sorry, I didn\'t hear that. Can you repeat what you just said?', ",
                                "                    'contentType': 'PlainText'",
                                "                }, ",
                                "                {",
                                "                    'content': 'Can you say that again?', ",
                                "                    'contentType': 'PlainText'",
                                "                }",
                                "            ]",
                                "        }, ",
                                        <% if(props.outputVoice) { %> 
                                "        'voiceId': '<%= props.outputVoice %>',",
                                        <% } %> 
                                        <% if(props.sessionTimeout) { %>
                                "        'idleSessionTTLInSeconds': '<%= props.sessionTimeout*60 %>'",
                                        <% } %>
                                "    };",
                                "    if (event.RequestType == 'Update') {",
                                "        newSlotTypeParams.checksum = '$LATEST'",
                                "        intentParams.checksum = '$LATEST'",
                                "        botParams.checksum = '$LATEST'",
                                "    }",
                                "    let responseData = {};",
                                "    newSlotTypeParams.forEach( slotType => lex.putSlotType(slotType,",
                                "        function(err, data) {",
                                "            if (err) console.log(err, err.stack); // an error occurred",
                                "            else     console.log(data);           // successful response",
                                "        })",
                                "    );",
                                "    intentParams.forEach( intent => lex.putIntent(intent,",
                                "        function(err, data) {",
                                "            if (err) console.log(err, err.stack); // an error occurred",
                                "            else     console.log(data);           // successful response",
                                "        })",
                                "    );",
                                "    return lex.putBot(botParams).promise()",
                                "        .then((res) => {",
                                "            responseData = res.ApplicationResponse;",
                                "            response.send(event, context, response.SUCCESS, responseData);",
                                "        }).catch((err) => {",
                                "            console.log(err.stack);",
                                "            responseData = {Error: err};",
                                "            response.send(event, context, response.FAILED, responseData);",
                                "            throw err;",
                                "        });",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs6.10",
                "Timeout": "300",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                }
            }
        },
        "LexFunctionOutputs": {
            "Type": "Custom::LambdaCallout",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LexFunction",
                        "Arn"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "Region": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "Id": {
            "Value": {
                "Fn::GetAtt": [
                    "LexFunctionOutputs",
                    "Id"
                ]
            }
        },
        "appName": {
            "Value": {
                "Fn::GetAtt": [
                    "LexFunctionOutputs",
                    "Name"
                ]
            }
        }
    }
}