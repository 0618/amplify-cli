{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Lex chatbot creation from Amplify CLI",
    "Parameters": {
        "Bot": {
            "name": "<%= props.botName %>",
            "childDirected": "<%= props.coppa %>",
            "locale": "en-US",
            "abortStatement": {
                "messages": [
                    {
                        "content": "I don't understand. Can you try again?", 
                        "contentType": "PlainText"
                    }, 
                    {
                        "content": "I'm sorry, I don't understand.", 
                        "contentType": "PlainText"
                    }
                ]
            }, 
            "clarificationPrompt": {
                "maxAttempts": 3, 
                "messages": [
                    {
                        "content": "I'm sorry, I didn't hear that. Can you repeate what you just said?", 
                        "contentType": "PlainText"
                    }, 
                    {
                        "content": "Can you say that again?", 
                        "contentType": "PlainText"
                    }
                ]
            }, 
            <% if(props.outputVoice) { %>
            "voiceId": "<%= props.outputVoice %>",
            <% } %>
            <% if(props.sessionTimeout) { %>
            "idleSessionTTLInSeconds": "<%= props.sessionTimeout*60 %>"
            <% } %>
        },
        "Intents": {
            <% for(var i = 0; i < props.intents.length; i++) { %>
            "<%= props.intents[i].intentName %>": {
                <% if(props.intents[i].confirmationQuestion) { %>
                "confirmationPrompt": {
                    "maxAttempts": 2, 
                    "messages": [
                        {
                            "content": "<%= props.intents[i].confirmationQuestion %>", 
                            "contentType": "PlainText"
                        }
                    ]
                }, 
                <% } %>
                <% if(props.intents[i].cancelMessage) { %>
                "rejectionStatement": {
                    "messages": [
                        {
                        "content": "<%= props.intents[i].cancelMessage %>", 
                        "contentType": "PlainText"
                        }
                    ]
                }, 
                <% } %>
                "sampleUtterances": [
                    <% for(var j = 0; j < props.intents[i].utterances.length; j++) { %>
                    "<%= props.intents[i].utterances[j] %>",
                    <% } %>
                ],
                <% if(props.intents[i].pathsAnswers) { %>
                "fulfillmentActivity": {
                    "type": "CodeHook",
                    "codeHook": {
                        "messageVersion": "$LATEST",
                        "uri": "<%= props.intents[i].pathsAnswers.paths[0].lambdaArn %>"
                    }
                }, 
                <% } else { %>
                "fulfillmentActivity": {
                    "type": "ReturnIntent"
                },
                <% } %>
                "slots": [
                    <% for(var j = 0; j < props.intents[i].slots.length; j++) { %>
                    {
                        "name": "<%= props.intents[i].slots[j].name %>",
                        "slotConstraint": <% if(props.intents[i].slots[j].required) { %>"Required"<% } else { %>"Optional"<% } %>,
                        "priority": <%= j %>,
                        "slotType": "<%= props.intents[i].slots[j].type %>",
                        "valueElicitationPrompt": {
                            "maxAttempts": 3,
                            "messages": [
                                {
                                    "content": "<%= props.intents[i].slots[j].prompt %>",
                                    "contentType": "PlainText"
                                }
                            ]
                        }
                    },
                    <% } %>
                ]
            },
            <% } %>
        },
        "NewSlotTypes": {
            <% for(var i = 0; i < props.intents.length; i++) { %>
            <% for(var j = 0; j < props.intents[i].newSlotTypes.length; j++) { %>
            "<%= props.intents[i].newSlotTypes[j].slotType %>": {
                "description": "<%= props.intents[i].newSlotTypes[j].slotTypeDescription %>",
                "enumerationValues": [
                    <% for(var k = 0; k < props.intents[i].newSlotTypes[j].slotValues.length; k++) { %>
                    {
                        "value": "<%= props.intents[i].newSlotTypes[j].slotValues[k] %>"
                    },
                    <% } %>
                ]
            },
            <% } %> 
            <% } %> 
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Creating lex chatbot"
                    },
                    "Parameters": [
                        "inputs"
                    ]
                }
            ]
        }
    },
    "Resources": {
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "roleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": {
                            "Ref": "cloudWatchPolicyName"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": {
                            "Ref": "lexPolicyName"
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "mobileanalytics:*",
                                        "mobiletargeting:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LexFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "const response = require('cfn-response');",
                                "const aws = require('aws-sdk');",
                                "const lex = new aws.LexModelBuildingService({ apiVersion: '2017-04-19' });",
                                "exports.handler = function(event, context) {",
                                "    if (event.RequestType == 'Delete') {",
                                "        response.send(event, context, response.SUCCESS);",
                                "        return;",
                                "    }",
                                "    const inputs = JSON.parse(event.ResourceProperties.inputs);",
                                "    let responseData = {};",
                                "    const params = {",
                                "        CreateApplicationRequest: {",
                                "            Name: appName",
                                "        }",
                                "    };",
                                "    return lex.putBot(params).promise()",
                                "        .then((res) => {",
                                "            responseData = res.ApplicationResponse;",
                                "            response.send(event, context, response.SUCCESS, responseData);",
                                "         }).catch((err) => {",
                                "            console.log(err.stack);",
                                "            responseData = {Error: err};",
                                "            response.send(event, context, response.FAILED, responseData);",
                                "            throw err;",
                                "        });",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs6.10",
                "Timeout": "300",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                }
            }
        },
        "LexFunctionOutputs": {
            "Type": "Custom::LambdaCallout",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LexFunction",
                        "Arn"
                    ]
                },
                "appName": {
                    "Ref": "appName"
                }
            }
        }
    },
    "Outputs": {
        "Region": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "Id": {
            "Value": {
                "Fn::GetAtt": [
                    "LexFunctionOutputs",
                    "Id"
                ]
            }
        },
        "appName": {
            "Value": {
                "Fn::GetAtt": [
                    "LexFunctionOutputs",
                    "Name"
                ]
            }
        }
    }
}