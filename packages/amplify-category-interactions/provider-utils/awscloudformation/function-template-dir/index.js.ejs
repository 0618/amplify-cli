const response = require('cfn-response');
const aws = require('aws-sdk');
const lex = new aws.LexModelBuildingService({ apiVersion: '2017-04-19' });
exports.handler = function(event, context) {
    if (event.RequestType == 'Delete') {
        response.send(event, context, response.SUCCESS);
        return;
    }
    let newSlotTypeParams = [
        <% for(var i = 0; i < props.intents.length; i++) { %>
        <% for(var j = 0; j < props.intents[i].newSlotTypes.length; j++) { %>
        {
            "name": "<%= props.intents[i].newSlotTypes[j].slotType %>",
            "description": "<%= props.intents[i].newSlotTypes[j].slotTypeDescription %>",
            "enumerationValues": [
                <% for(var k = 0; k < props.intents[i].newSlotTypes[j].slotValues.length; k++) { %>
                {
                    "value": "<%= props.intents[i].newSlotTypes[j].slotValues[k] %>"
                },
                <% } %>
            ]
        },
        <% } %>
        <% } %>
    ];
    let intentParams = [
        <% for(var i = 0; i < props.intents.length; i++) { %>
        {
            "name": "<%= props.intents[i].intentName %>",
            <% if(props.intents[i].confirmationQuestion) { %>
            "confirmationPrompt": {
                "maxAttempts": 2, 
                "messages": [
                    {
                        "content": "<%= props.intents[i].confirmationQuestion %>", 
                        "contentType": "PlainText"
                    }
                ]
            }, 
            <% } %>
            <% if(props.intents[i].cancelMessage) { %>
            "rejectionStatement": {
                "messages": [
                    {
                    "content": "<%= props.intents[i].cancelMessage %>", 
                    "contentType": "PlainText"
                    }
                ]
            }, 
        <% } %>
            "sampleUtterances": [
            <% for(var j = 0; j < props.intents[i].utterances.length; j++) { %>
                "<%= props.intents[i].utterances[j] %>",
            <% } %>
            ],
        <% if(props.intents[i].pathsAnswer) { %>
            "fulfillmentActivity": {
                "type": "CodeHook",
                "codeHook": {
                    "messageVersion": "1.0",
                    "uri": "<%= props.intents[i].pathsAnswer.paths[0].lambdaArn %>"
                }
            }, 
        <% } else { %>
            "fulfillmentActivity": {
                "type": "ReturnIntent"
            },
        <% } %>
            "slots": [
                <% for(var j = 0; j < props.intents[i].slots.length; j++) { %>
                {
                    "name": "<%= props.intents[i].slots[j].name %>",
                    "slotConstraint": <% if(props.intents[i].slots[j].required) { %>"Required"<% } else { %>"Optional"<% } %>,
                    "priority": <%= j %>,
                    "slotType": "<%= props.intents[i].slots[j].type %>",
                    <% if(props.intents[i].slots[j].customType) { %>"slotTypeVersion": "$LATEST",<% } %>
                    "valueElicitationPrompt": {
                        "maxAttempts": 3,
                        "messages": [
                            {
                                "content": "<%= props.intents[i].slots[j].prompt %>",
                                "contentType": "PlainText"
                            }
                        ]
                    }
                },
                <% } %>
            ]
        },
        <% } %>
    ];
    let botParams = {
        "name": "<%= props.botName %>",
        "intents": [
        <% for(var i = 0; i < props.intents.length; i++) { %>
            {
                "intentName": "<%= props.intents[i].intentName %>",
                "intentVersion": "$LATEST"
            },
        <% } %>
        ],
        "childDirected": <%= props.coppa %>,
        "locale": "en-US",
        "abortStatement": {
            "messages": [
                {
                    "content": "I don't understand. Can you try again?", 
                    "contentType": "PlainText"
                }, 
                {
                    "content": "I'm sorry, I don't understand.", 
                    "contentType": "PlainText"
                }
            ]
        }, 
        "clarificationPrompt": {
            "maxAttempts": 3, 
            "messages": [
                {
                    "content": "I'm sorry, I didn't hear that. Can you repeat what you just said?", 
                    "contentType": "PlainText"
                }, 
                {
                    "content": "Can you say that again?", 
                    "contentType": "PlainText"
                }
            ]
        }, 
        <% if(props.outputVoice) { %>
        "voiceId": "<%= props.outputVoice %>",
        <% } %>
        <% if(props.sessionTimeout) { %>
        "idleSessionTTLInSeconds": "<%= props.sessionTimeout*60 %>"
        <% } %>
    };
    let responseData = {};
    let slotTypePromises = [];
    newSlotTypeParams.forEach( slotType => {
        lex.getSlotType({
            'name': slotType.name,
            'version': '$LATEST'
        }, 
        function(err, data) {
            if (err) {
                slotTypePromises.push(lex.putSlotType(slotType,
                function(err, data) {
                    if (err) console.log(err, err.stack); // an error occurred
                    else     console.log(data);           // successful response
                }).promise())
            }
            else {
                slotType['checksum'] = data.checksum;
                slotTypePromises.push(lex.putSlotType(slotType,
                function(err, data) {
                    if (err) console.log(err, err.stack); // an error occurred
                    else     console.log(data);           // successful response
                }).promise())
            }
        })
    });
    return Promise.all(slotTypePromises)
        .then(() => {
            let intentPromises = [];
            intentParams.forEach( intent => {
                lex.getIntent({
                    'version': '$LATEST',
                    'name': intent.name
                },
                function(err, data) {
                    if (err) {
                        intentPromises.push(lex.putIntent(intent,
                        function(err, data) {
                            if (err) console.log(err, err.stack); // an error occurred
                            else     console.log(data);           // successful response
                        }).promise())
                    }
                    else {
                        intent['checksum'] = data.checksum;
                        intentPromises.push(lex.putIntent(intent,
                        function(err, data) {
                            if (err) console.log(err, err.stack); // an error occurred
                            else     console.log(data);           // successful response
                        }).promise())
                    }
                })
            });
            return Promise.all(intentPromises)
                .then(() => {
                    lex.getBot({
                        'name': botParams.name,
                        'versionOrAlias': '$LATEST'
                    },
                    function(err, data) {
                        if (err) {
                            return lex.putBot(botParams).promise()
                            .then((res) => {
                                responseData = res.ApplicationResponse;
                                response.send(event, context, response.SUCCESS, responseData);
                            }).catch((err) => {
                                console.log(err.stack);
                                responseData = {Error: err};
                                response.send(event, context, response.FAILED, responseData);
                                throw err;
                            })
                        }
                        else {
                            botParams['checksum'] = data.checksum;
                            return lex.putBot(botParams).promise()
                            .then((res) => {
                                responseData = res.ApplicationResponse;
                                response.send(event, context, response.SUCCESS, responseData);
                            }).catch((err) => {
                                console.log(err.stack);
                                responseData = {Error: err};
                                response.send(event, context, response.FAILED, responseData);
                                throw err;
                            })
                        }
                    })
                })
        }).catch((err) => {
            console.log(err.stack);
            responseData = {Error: err};
            response.send(event, context, response.FAILED, responseData);
            throw err;
        });
};

