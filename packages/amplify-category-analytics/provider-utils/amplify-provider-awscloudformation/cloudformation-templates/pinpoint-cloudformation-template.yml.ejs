AWSTemplateFormatVersion: 2010-09-09
Description: Pinpoint app creation from Amplify CLI
Parameters:
  AppName:
    Default: <%= props.appName %>
    Type: String
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Creating pinpoint app
        Parameters:
          - AppName
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: <%=props.roleName %>
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: <%= props.cloudWatchPolicyName %>
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: <%= props.pinpointPolicyName %>
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:*'
                  - 'mobiletargeting:*'
                Resource: '*'
  PinpointFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join 
          - |+

          - - 'const response = require(''cfn-response'');'
            - 'const aws = require(''aws-sdk'');'
            - 'const pinpoint = new aws.Pinpoint({ apiVersion: ''2016-12-01'' });'
            - 'exports.handler = function(event, context) {'
            - '    if (event.RequestType == ''Delete'') {'
            - '        response.send(event, context, response.SUCCESS);'
            - '        return;'
            - '    }'
            - '    const appName = event.ResourceProperties.AppName;'
            - '    let responseData = {};'
            - '    const params = {'
            - '        CreateApplicationRequest: {'
            - '            Name: appName'
            - '        }'
            - '    };'
            - '    return pinpoint.createApp(params).promise()'
            - '        .then((res) => {'
            - '            responseData = res.ApplicationResponse;'
            - '            response.send(event, context, response.SUCCESS, responseData);'
            - '         }).catch((err) => {'
            - '            console.log(err.stack);'
            - '            responseData = {Error: err};'
            - '            response.send(event, context, response.FAILED, responseData);'
            - '            throw err;'
            - '        });'
            - '};'
      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: '300'
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
  PinpointFunctionOutputs:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt 
        - PinpointFunction
        - Arn
      AppName: !Ref AppName
Outputs:
  Id:
    Value: !GetAtt 
      - PinpointFunctionOutputs
      - Id
  AppName:
   Value: !GetAtt 
      - PinpointFunctionOutputs
      - Name