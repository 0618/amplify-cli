{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Parameters": {
        "AppSyncApiName": {
            "Type": "String",
            "Description": "The name of the AppSync API",
            "Default": "AppSyncSimpleTransform"
        },
        "DynamoDBTableName": {
            "Type": "String",
            "Description": "The name of the DynamoDB table backing your API.",
            "Default": "AppSyncSimpleTransformTable"
        },
        "ReadIOPS": {
            "Type": "Number",
            "Description": "The number of read IOPS the table should support.",
            "Default": 5
        },
        "WriteIOPS": {
            "Type": "Number",
            "Description": "The number of write IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBAccessIAMRole": {
            "Type": "String",
            "Description": "The name of the IAM role assumed by AppSync.",
            "Default": "AppSyncSimpleTransformRole"
        },
        "IAMRoleName": {
            "Type": "String",
            "Description": "The name of the IAM role assumed by AppSync.",
            "Default": "AppSyncElasticSearchAccess"
        },
        "StreamingIAMRoleName": {
            "Type": "String",
            "Description": "The name of the streaming lambda function.",
            "Default": "DynamoDBToElasticSearch"
        },
        "DebugStreamingLambda": {
            "Type": "Number",
            "Description": "Enable debug logs for the Dynamo -> ES streaming lambda.",
            "Default": 1,
            "AllowedValues": [
                0,
                1
            ]
        },
        "ElasticSearchInstanceCount": {
            "Type": "Number",
            "Description": "The number of instances to launch into the ElasticSearch domain.",
            "Default": 1
        },
        "ElasticSearchDomainName": {
            "Type": "String",
            "Description": "The name of the ElasticSearch domain.",
            "Default": "appsync-elasticsearch-domain",
            "AllowedPattern": "^[a-z][a-z0-9-]*$",
            "MinLength": 1,
            "MaxLength": 28
        },
        "ElasticSearchInstanceType": {
            "Type": "String",
            "Description": "The type of instance to launch into the ElasticSearch domain.",
            "Default": "t2.small.elasticsearch",
            "AllowedValues": [
                "t2.small.elasticsearch",
                "t2.medium.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "c4.2xlarge.elasticsearch",
                "c4.4xlarge.elasticsearch",
                "c4.8xlarge.elasticsearch",
                "m3.medium.elasticsearch",
                "m3.large.elasticsearch",
                "m3.xlarge.elasticsearch",
                "m3.2xlarge.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "m4.2xlarge.elasticsearch",
                "m4.4xlarge.elasticsearch",
                "m4.10xlarge.elasticsearch",
                "r3.large.elasticsearch",
                "r3.xlarge.elasticsearch",
                "r3.2xlarge.elasticsearch",
                "r3.4xlarge.elasticsearch",
                "r3.8xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch",
                "r4.2xlarge.elasticsearch",
                "r4.4xlarge.elasticsearch",
                "r4.8xlarge.elasticsearch",
                "r4.16xlarge.elasticsearch",
                "i2.xlarge.elasticsearch",
                "i2.2xlarge.elasticsearch",
                "i3.large.elasticsearch",
                "i3.xlarge.elasticsearch",
                "i3.2xlarge.elasticsearch",
                "i3.4xlarge.elasticsearch",
                "i3.8xlarge.elasticsearch",
                "i3.16xlarge.elasticsearch"
            ]
        },
        "ElasticSearchEBSVolumeGB": {
            "Type": "Number",
            "Description": "The size in GB of the EBS volumes that contain our data.",
            "Default": 20
        },
        "StreamingLambdaCodeS3Bucket": {
            "Type": "String",
            "Description": "S3 bucket containing the DynamoDB streaming lambda code.",
            "Default": "mp-lambda-blueprints"
        },
        "StreamingLambdaCodeS3Key": {
            "Type": "String",
            "Description": "S3 key containing the DynamoDB streaming lambda code.",
            "Default": "streaming-lambda.zip"
        },
        "StreamingLambdaCodeS3Version": {
            "Type": "String",
            "Description": "S3 key containing the DynamoDB lambda code version.",
            "Default": "Sc32fGDZq2SdHBc1Hek6I3_Lzzt4OazX"
        }
    },
    "Resources": {
        "GraphQLAPILogicalID": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
                "Name": {
                    "Ref": "AppSyncApiName"
                },
                "AuthenticationType": "API_KEY"
            }
        },
        "DynamoDBTableLogicalID": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "DynamoDBTableName"
                },
                "KeySchema": [
                    {
                        "AttributeName": "__typename",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "id",
                        "KeyType": "RANGE"
                    }
                ],
                "AttributeDefinitions": [
                    {
                        "AttributeName": "__typename",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "ReadIOPS"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "WriteIOPS"
                    }
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
            }
        },
        "DynamoDBAccessIAMRoleLogicalID": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "DynamoDBAccessIAMRole"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "DynamoDBAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "DynamoDBTableLogicalID",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "DynamoDBTableLogicalID",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DynamoDBDataSourceLogicalID": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "Name": "DynamoDBTableLogicalID",
                "Type": "AMAZON_DYNAMODB",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "DynamoDBAccessIAMRoleLogicalID",
                        "Arn"
                    ]
                },
                "DynamoDBConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "DynamoDBTableLogicalID",
                                            "Arn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "TableName": {
                        "Ref": "DynamoDBTableLogicalID"
                    }
                }
            }
        },
        "APIKeyLogicalID": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                }
            }
        },
        "GraphQLSchemaLogicalID": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "Definition": "input CreatePostInput {\n  title: String!\n  rating: Int!\n  tags: [String]\n}\n\ninput DeletePostInput {\n  id: ID\n}\n\ntype Mutation {\n  createPost(input: CreatePostInput!): Post\n  updatePost(input: UpdatePostInput!): Post\n  deletePost(input: DeletePostInput!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  rating: Int!\n  tags: [String]\n}\n\ntype PostConnection {\n  items: [Post]\n  total: Int\n  nextToken: String\n}\n\ntype Query {\n  getPost(id: ID!): Post\n  searchPost(query: String!, first: Int, after: String): PostConnection\n}\n\ninput UpdatePostInput {\n  id: ID!\n  title: String\n  rating: Int\n  tags: [String]\n}\n"
            }
        },
        "CreatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBDataSourceLogicalID",
                        "Name"
                    ]
                },
                "FieldName": "createPost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#set( $value = $util.map.copyAndRemoveAllKeys($context.args.input, []) )\n$util.qr($value.put(\"createdAt\", \"$util.time.nowISO8601()\"))\n$util.qr($value.put(\"updatedAt\", \"$util.time.nowISO8601()\"))\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": {\n          \"S\": \"$util.autoId()\"\n    }\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($value),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#type) AND attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#type\": \"__typename\",\n          \"#id\": \"id\"\n    }\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchemaLogicalID"
        },
        "UpdatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBDataSourceLogicalID",
                        "Name"
                    ]
                },
                "FieldName": "updatePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"__typename\", \"id\"]).entrySet() )\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#${entry.key}\") )\n$util.qr($expNames.put(\"#${entry.key}\", \"${entry.key}\"))\n  #else\n    $util.qr($expSet.put(\"#${entry.key}\", \":${entry.key}\"))\n$util.qr($expNames.put(\"#${entry.key}\", \"${entry.key}\"))\n$util.qr($expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n#foreach( $entry in $expSet.entrySet() )\n  #set( $expression = \"$expression $entry.key = $entry.value\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"${expression} ADD\" )\n#foreach( $entry in $expAdd.entrySet() )\n  #set( $expression = \"$expression $entry.key $entry.value\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"${expression} REMOVE\" )\n#foreach( $entry in $expRemove )\n  #set( $expression = \"$expression $entry\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !${expNames.isEmpty()} )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !${expValues.isEmpty()} )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": {\n          \"S\": \"$context.args.input.id\"\n    }\n  },\n  \"update\": $util.toJson($update),\n  \"condition\": {\n      \"expression\": ,\n      \"expressionNames\": {\n          \"#type\": ,\n          \"#id\": \n    }\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchemaLogicalID"
        },
        "DeletePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBDataSourceLogicalID",
                        "Name"
                    ]
                },
                "FieldName": "deletePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchemaLogicalID"
        },
        "GetPostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBDataSourceLogicalID",
                        "Name"
                    ]
                },
                "FieldName": "getPost",
                "TypeName": "Query",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchemaLogicalID"
        },
        "IAMRoleLogicalID": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "IAMRoleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomainLogicalID",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticSearchDataSourceLogicalID": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "Name": "ElasticSearchDomainLogicalID",
                "Type": "AMAZON_ELASTICSEARCH",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "IAMRoleLogicalID",
                        "Arn"
                    ]
                },
                "ElasticsearchConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "ElasticSearchDomainLogicalID",
                                            "DomainArn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "Endpoint": {
                        "Fn::Join": [
                            "",
                            [
                                "https://",
                                {
                                    "Fn::GetAtt": [
                                        "ElasticSearchDomainLogicalID",
                                        "DomainEndpoint"
                                    ]
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "ElasticSearchDomainLogicalID": {
            "Type": "AWS::Elasticsearch::Domain",
            "Properties": {
                "DomainName": {
                    "Ref": "ElasticSearchDomainName"
                },
                "ElasticsearchVersion": "6.2",
                "ElasticsearchClusterConfig": {
                    "InstanceCount": {
                        "Ref": "ElasticSearchInstanceCount"
                    },
                    "InstanceType": {
                        "Ref": "ElasticSearchInstanceType"
                    }
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeType": "gp2",
                    "VolumeSize": {
                        "Ref": "ElasticSearchEBSVolumeGB"
                    }
                }
            }
        },
        "StreamingLambdaIAMRoleLogicalID": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "StreamingIAMRoleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomainLogicalID",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DynamoDBStreamAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "dynamodb:DescribeStream",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:ListStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "DynamoDBTableLogicalID",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "stream",
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchLogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "StreamingLambdaFunctionLogicalID": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "StreamingLambdaCodeS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "StreamingLambdaCodeS3Key"
                    },
                    "S3ObjectVersion": {
                        "Ref": "StreamingLambdaCodeS3Version"
                    }
                },
                "Handler": "python_streaming_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "StreamingLambdaIAMRoleLogicalID",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Environment": {
                    "Variables": {
                        "ES_ENDPOINT": {
                            "Fn::GetAtt": [
                                "ElasticSearchDomainLogicalID",
                                "DomainEndpoint"
                            ]
                        },
                        "ES_REGION": {
                            "Fn::Select": [
                                3,
                                {
                                    "Fn::Split": [
                                        ":",
                                        {
                                            "Fn::GetAtt": [
                                                "ElasticSearchDomainLogicalID",
                                                "DomainArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DEBUG": {
                            "Ref": "DebugStreamingLambda"
                        }
                    }
                }
            }
        },
        "StreamingLambdaEventSourceMappingLogicalID": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 100,
                "Enabled": true,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "DynamoDBTableLogicalID",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "StreamingLambdaFunctionLogicalID",
                        "Arn"
                    ]
                },
                "StartingPosition": "TRIM_HORIZON"
            }
        },
        "SearchPostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPILogicalID",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "ElasticSearchDataSourceLogicalID",
                        "Name"
                    ]
                },
                "FieldName": "searchPost",
                "TypeName": "Query",
                "RequestMappingTemplate": {
                    "Fn::Sub": [
                        "#set( $body = {\n  \"size\": $util.defaultIfNull($ctx.args.first, 20),\n  \"sort\":   [{\n      \"createdAt\": \"asc\"\n  }, {\n      \"_id\": \"desc\"\n  }]\n} )\n#if( $util.isNull($ctx.args.query) )\n  #set( $query = {\n  \"bool\": {\n      \"filter\": {\n          \"term\": {\n              \"__typename.keyword\": \"Post\"\n      }\n    },\n      \"must\":     [{\n          \"match_all\": {}\n    }]\n  }\n} )\n#else\n  #set( $query = {\n  \"bool\": {\n      \"filter\": {\n          \"term\": {\n              \"__typename.keyword\": \"Post\"\n      }\n    },\n      \"must\":     [{\n          \"multi_match\": {\n              \"query\": \"$ctx.args.query\",\n              \"fields\":         [\"title\", \"rating\", \"tags\"],\n              \"type\": \"best_fields\"\n      }\n    }]\n  }\n} )\n#end\n$util.qr($body.put(\"query\", $query))\n#if( !$util.isNullOrEmpty($ctx.args.after) )\n  #set( $split = $ctx.args.after.split(\"/\") )\n#set( $afterToken = [$split.get(0), $split.get(1)] )\n$util.qr($body.put(\"search_after\", $afterToken))\n#end\n#set( $indexPath = \"/${__ES_INDEX}/_search\" )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GET\",\n  \"path\": \"$indexPath.toLowerCase()\",\n  \"params\": {\n      \"body\": $util.toJson($body)\n  }\n}",
                        {
                            "__ES_INDEX": {
                                "Ref": "DynamoDBTableLogicalID"
                            }
                        }
                    ]
                },
                "ResponseMappingTemplate": "#set( $items = [] )\n#foreach( $entry in $context.result.hits.hits )\n  #if( !$foreach.hasNext )\n    #set( $nextToken = \"$entry.sort.get(0)/$entry.sort.get(1)\" )\n  #end\n$util.qr($items.add($entry.get(\"_source\")))\n#end\n$util.toJson({\n  \"items\": $items,\n  \"total\": $ctx.result.hits.total,\n  \"nextToken\": $nextToken\n})"
            },
            "DependsOn": "GraphQLSchemaLogicalID"
        }
    },
    "Outputs": {}
}