input SearchPost {
  # Maps to ES `"filter": "term": { "FIELD.keyword": "VALUE" }`
  title_eq: String
  # Maps to ES `"match": { "FIELD": "VALUE" }`
  title_match: String
  # Maps to ES `"match_phrase": { "FIELD": "VALUE" }`
  title_match_phrase: String
  # Maps to ES `"exists" : { "field" : "FIELD" }`
  title_exists: Boolean
  # Maps to ES `"regexp":{ "FIELD": "s.*y" }
  title_regexp: String
}


input StringSearchInput {
    eq: String
    match: String
    matchPhrase: String
    exists: Boolean
    regexp: String
}
input IntSearchInput {
    eq: Int
    exists: Boolean
}
input PostSearchInput {
    title: StringSearchInput
    rating: IntSearchInput
}

input StringSearchInput {
    contains: String
    begins: String
    ends: String
}
input PostSearchInput {
    title: StringSearchInput
    and: [PostSearchInput]
    or: [PostSearchInput]
    not: [PostSearchInput]
}
query {
    # A scan that can filter on any argument
    filterPosts(filter: PostFilterInput, sort: PostSortInput, limit: Int, nextToken: String): PostConnection
}

enum SortDirection {
    ASC
    DESC
}
enum SortablePostTypeFields {
    title
    rating
}
input SortPostInput {
    direction: SortDirection
    field: SortablePostTypeFields
}
// See transform with search_after

mutation Create {
  createUser(input:{name: "Hello"}) {
    id
    name
  }
}

mutation Update {
  updateUser(input: {name:"WHAT", id:"2d48ee75-b9a2-4df8-9bea-d6d839a4cda6"}) {
    id
    name
  }
}

mutation Delete {
  deleteUser(input:{id:"2d48ee75-b9a2-4df8-9bea-d6d839a4cda6"}) {
    id
    name
  }
}

query Get {
  getUser(id: "2d48ee75-b9a2-4df8-9bea-d6d839a4cda6") {
		id
  	name
  }
}

fragment FullPost on Post {
  id
  title
  rating
  tags
}
mutation CreatePost($create:CreatePostInput!) {
  createPost(input:$create) {
    ...FullPost
  }
}

mutation UpdatePost {
  updatePost(input: {title:"New Title", id:"8e25ab18-99b5-410b-95bf-48a81009e0eb"}) {
    ...FullPost
  }
}

mutation DeletePost($postId: ID!) {
  deletePost(input: { id: $postId}) {
    ...FullPost
  }
}