{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Parameters": {
        "AppSyncApiName": {
            "Type": "String",
            "Description": "The name of the AppSync API",
            "Default": "AppSyncSimpleTransform"
        },
        "DynamoDBModelTableName": {
            "Type": "String",
            "Description": "The name of the DynamoDB table backing your API.",
            "Default": "AppSyncSimpleTransformTable"
        },
        "DynamoDBModelTableReadIOPS": {
            "Type": "Number",
            "Description": "The number of read IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBModelTableWriteIOPS": {
            "Type": "Number",
            "Description": "The number of write IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBModelTableAccessIAMRoleName": {
            "Type": "String",
            "Description": "The name of the IAM role assumed by AppSync.",
            "Default": "AppSyncSimpleTransformRole"
        },
        "ElasticSearchAccessIAMRoleName": {
            "Type": "String",
            "Description": "The name of the IAM role assumed by AppSync.",
            "Default": "AppSyncElasticSearchAccess"
        },
        "ElasticSearchStreamingFunctionName": {
            "Type": "String",
            "Description": "The name of the streaming lambda function.",
            "Default": "DynamoDBToElasticSearchFunction"
        },
        "ElasticSearchStreamingIAMRoleName": {
            "Type": "String",
            "Description": "The name of the streaming lambda function IAM role.",
            "Default": "DynamoDBToElasticSearchFunctionIAMRole"
        },
        "ElasticSearchDebugStreamingLambda": {
            "Type": "Number",
            "Description": "Enable debug logs for the Dynamo -> ES streaming lambda.",
            "Default": 1,
            "AllowedValues": [
                0,
                1
            ]
        },
        "ElasticSearchInstanceCount": {
            "Type": "Number",
            "Description": "The number of instances to launch into the ElasticSearch domain.",
            "Default": 1
        },
        "ElasticSearchDomainName": {
            "Type": "String",
            "Description": "The name of the ElasticSearch domain.",
            "Default": "appsync-elasticsearch-domain",
            "AllowedPattern": "^[a-z][a-z0-9-]*$",
            "MinLength": 1,
            "MaxLength": 28
        },
        "ElasticSearchInstanceType": {
            "Type": "String",
            "Description": "The type of instance to launch into the ElasticSearch domain.",
            "Default": "t2.small.elasticsearch",
            "AllowedValues": [
                "t2.small.elasticsearch",
                "t2.medium.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "c4.2xlarge.elasticsearch",
                "c4.4xlarge.elasticsearch",
                "c4.8xlarge.elasticsearch",
                "m3.medium.elasticsearch",
                "m3.large.elasticsearch",
                "m3.xlarge.elasticsearch",
                "m3.2xlarge.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "m4.2xlarge.elasticsearch",
                "m4.4xlarge.elasticsearch",
                "m4.10xlarge.elasticsearch",
                "r3.large.elasticsearch",
                "r3.xlarge.elasticsearch",
                "r3.2xlarge.elasticsearch",
                "r3.4xlarge.elasticsearch",
                "r3.8xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch",
                "r4.2xlarge.elasticsearch",
                "r4.4xlarge.elasticsearch",
                "r4.8xlarge.elasticsearch",
                "r4.16xlarge.elasticsearch",
                "i2.xlarge.elasticsearch",
                "i2.2xlarge.elasticsearch",
                "i3.large.elasticsearch",
                "i3.xlarge.elasticsearch",
                "i3.2xlarge.elasticsearch",
                "i3.4xlarge.elasticsearch",
                "i3.8xlarge.elasticsearch",
                "i3.16xlarge.elasticsearch"
            ]
        },
        "ElasticSearchEBSVolumeGB": {
            "Type": "Number",
            "Description": "The size in GB of the EBS volumes that contain our data.",
            "Default": 20
        },
        "ElasticSearchStreamingLambdaCodeS3Bucket": {
            "Type": "String",
            "Description": "S3 bucket containing the DynamoDB streaming lambda code.",
            "Default": "sr-lambda-blueprints"
        },
        "ElasticSearchStreamingLambdaCodeS3Key": {
            "Type": "String",
            "Description": "S3 key containing the DynamoDB streaming lambda code.",
            "Default": "streaming-lambda.zip"
        },
        "ElasticSearchStreamingLambdaCodeS3Version": {
            "Type": "String",
            "Description": "S3 key containing the DynamoDB lambda code version.",
            "Default": "n9NaP2A0v3G3BzPXDkrs3rbrkLq2O4qJ"
        }
    },
    "Resources": {
        "GraphQLAPI": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
                "Name": {
                    "Ref": "AppSyncApiName"
                },
                "AuthenticationType": "API_KEY"
            }
        },
        "DynamoDBModelTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Ref": "DynamoDBModelTableName"
                },
                "KeySchema": [
                    {
                        "AttributeName": "__typename",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "id",
                        "KeyType": "RANGE"
                    }
                ],
                "AttributeDefinitions": [
                    {
                        "AttributeName": "__typename",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "DynamoDBModelTableReadIOPS"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "DynamoDBModelTableWriteIOPS"
                    }
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
            }
        },
        "DynamoDBModelTableAccessIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "DynamoDBModelTableAccessIAMRoleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "DynamoDBAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "DynamoDBModelTable",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "DynamoDBModelTable",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DynamoDBModelTableDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Name": "DynamoDBModelTable",
                "Type": "AMAZON_DYNAMODB",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTableAccessIAMRole",
                        "Arn"
                    ]
                },
                "DynamoDBConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "DynamoDBModelTable",
                                            "Arn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "TableName": {
                        "Ref": "DynamoDBModelTable"
                    }
                }
            }
        },
        "GraphQLAPIKey": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                }
            }
        },
        "GraphQLSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Definition": "input CreatePostInput {\n  title: String!\n  upvotes: Int\n  downvotes: Int\n  percantageUp: Float\n  comments: [String]\n  isPublished: Boolean\n}\n\ninput DeletePostInput {\n  id: ID\n}\n\ntype Mutation {\n  createPost(input: CreatePostInput!): Post\n  updatePost(input: UpdatePostInput!): Post\n  deletePost(input: DeletePostInput!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n  upvotes: Int\n  downvotes: Int\n  percantageUp: Float\n  comments: [String]\n  isPublished: Boolean\n}\n\ntype Query {\n  getPost(id: ID!): Post\n}\n\ninput SearchableFloatRangeInput {\n  gt: Float\n  lt: Float\n  gte: Float\n  lte: Float\n}\n\ninput SearchableIntRangeInput {\n  gt: Int\n  lt: Int\n  gte: Int\n  lte: Int\n}\n\ninput SearchablePostQueryInput {\n  title: SearchableStringQueryInput\n  upvotes: SearchableIntRangeInput\n  downvotes: SearchableIntRangeInput\n  percantageUp: SearchableFloatRangeInput\n  isPublished: Boolean\n}\n\ninput SearchableStringQueryInput {\n  eq: String\n  match: String\n  matchPhrase: String\n  exists: Boolean\n  regexp: String\n}\n\ninput UpdatePostInput {\n  id: ID!\n  title: String\n  upvotes: Int\n  downvotes: Int\n  percantageUp: Float\n  comments: [String]\n  isPublished: Boolean\n}\n"
            }
        },
        "CreatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTableDataSource",
                        "Name"
                    ]
                },
                "FieldName": "createPost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#set( $value = $util.map.copyAndRemoveAllKeys($context.args.input, []) )\n$util.qr($value.put(\"createdAt\", \"$util.time.nowISO8601()\"))\n$util.qr($value.put(\"updatedAt\", \"$util.time.nowISO8601()\"))\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": {\n          \"S\": \"$util.autoId()\"\n    }\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($value),\n  \"condition\": {\n      \"expression\": \"attribute_not_exists(#type) AND attribute_not_exists(#id)\",\n      \"expressionNames\": {\n          \"#type\": \"__typename\",\n          \"#id\": \"id\"\n    }\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "UpdatePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTableDataSource",
                        "Name"
                    ]
                },
                "FieldName": "updatePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "#set( $expNames = {} )\n#set( $expValues = {} )\n#set( $expSet = {} )\n#set( $expAdd = {} )\n#set( $expRemove = [] )\n#foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"__typename\", \"id\"]).entrySet() )\n  #if( $util.isNull($entry.value) )\n    #set( $discard = $expRemove.add(\"#${entry.key}\") )\n$util.qr($expNames.put(\"#${entry.key}\", \"${entry.key}\"))\n  #else\n    $util.qr($expSet.put(\"#${entry.key}\", \":${entry.key}\"))\n$util.qr($expNames.put(\"#${entry.key}\", \"${entry.key}\"))\n$util.qr($expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value)))\n  #end\n#end\n#set( $expression = \"\" )\n#if( !$expSet.isEmpty() )\n  #set( $expression = \"SET\" )\n#foreach( $entry in $expSet.entrySet() )\n  #set( $expression = \"$expression $entry.key = $entry.value\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#if( !$expAdd.isEmpty() )\n  #set( $expression = \"${expression} ADD\" )\n#foreach( $entry in $expAdd.entrySet() )\n  #set( $expression = \"$expression $entry.key $entry.value\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#if( !$expRemove.isEmpty() )\n  #set( $expression = \"${expression} REMOVE\" )\n#foreach( $entry in $expRemove )\n  #set( $expression = \"$expression $entry\" )\n  #if( $foreach.hasNext() )\n    #set( $expression = \"$expression,\" )\n  #end\n#end\n#end\n#set( $update = {} )\n$util.qr($update.put(\"expression\", \"$expression\"))\n#if( !${expNames.isEmpty()} )\n  $util.qr($update.put(\"expressionNames\", $expNames))\n#end\n#if( !${expValues.isEmpty()} )\n  $util.qr($update.put(\"expressionValues\", $expValues))\n#end\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": {\n          \"S\": \"$context.args.input.id\"\n    }\n  },\n  \"update\": $util.toJson($update),\n  \"condition\": {\n      \"expression\": \"attribute_exists(#type) AND attribute_exists(#id)\",\n      \"expressionNames\": {\n          \"#type\": \"__typename\",\n          \"#id\": \"id\"\n    }\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "DeletePostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTableDataSource",
                        "Name"
                    ]
                },
                "FieldName": "deletePost",
                "TypeName": "Mutation",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "GetPostResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTableDataSource",
                        "Name"
                    ]
                },
                "FieldName": "getPost",
                "TypeName": "Query",
                "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GetItem\",\n  \"key\": {\n      \"__typename\": {\n          \"S\": \"Post\"\n    },\n      \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  }\n}",
                "ResponseMappingTemplate": "$util.toJson($context.result)"
            },
            "DependsOn": "GraphQLSchema"
        },
        "ElasticSearchAccessIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "ElasticSearchAccessIAMRoleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomain",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticSearchDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Name": "ElasticSearchDomain",
                "Type": "AMAZON_ELASTICSEARCH",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "ElasticSearchAccessIAMRole",
                        "Arn"
                    ]
                },
                "ElasticsearchConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "ElasticSearchDomain",
                                            "DomainArn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "Endpoint": {
                        "Fn::Join": [
                            "",
                            [
                                "https://",
                                {
                                    "Fn::GetAtt": [
                                        "ElasticSearchDomain",
                                        "DomainEndpoint"
                                    ]
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "ElasticSearchDomain": {
            "Type": "AWS::Elasticsearch::Domain",
            "Properties": {
                "DomainName": {
                    "Ref": "ElasticSearchDomainName"
                },
                "ElasticsearchVersion": "6.2",
                "ElasticsearchClusterConfig": {
                    "InstanceCount": {
                        "Ref": "ElasticSearchInstanceCount"
                    },
                    "InstanceType": {
                        "Ref": "ElasticSearchInstanceType"
                    }
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeType": "gp2",
                    "VolumeSize": {
                        "Ref": "ElasticSearchEBSVolumeGB"
                    }
                }
            }
        },
        "ElasticSearchStreamingLambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Ref": "ElasticSearchStreamingIAMRoleName"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomain",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DynamoDBStreamAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "dynamodb:DescribeStream",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:ListStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "DynamoDBModelTable",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "stream",
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchLogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticSearchStreamingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ElasticSearchStreamingLambdaCodeS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "ElasticSearchStreamingLambdaCodeS3Key"
                    },
                    "S3ObjectVersion": {
                        "Ref": "ElasticSearchStreamingLambdaCodeS3Version"
                    }
                },
                "FunctionName": {
                    "Ref": "ElasticSearchStreamingFunctionName"
                },
                "Handler": "python_streaming_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "ElasticSearchStreamingLambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Environment": {
                    "Variables": {
                        "ES_ENDPOINT": {
                            "Fn::GetAtt": [
                                "ElasticSearchDomain",
                                "DomainEndpoint"
                            ]
                        },
                        "ES_REGION": {
                            "Fn::Select": [
                                3,
                                {
                                    "Fn::Split": [
                                        ":",
                                        {
                                            "Fn::GetAtt": [
                                                "ElasticSearchDomain",
                                                "DomainArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DEBUG": {
                            "Ref": "ElasticSearchDebugStreamingLambda"
                        }
                    }
                }
            }
        },
        "ElasticSearchStreamingLambdaEventSourceMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 100,
                "Enabled": true,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "DynamoDBModelTable",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ElasticSearchStreamingLambdaFunction",
                        "Arn"
                    ]
                },
                "StartingPosition": "TRIM_HORIZON"
            }
        }
    },
    "Outputs": {
        "GraphQLAPIEndpointOutput": {
            "Description": "Your GraphQL API endpoint.",
            "Value": {
                "Fn::GetAtt": [
                    "GraphQLAPI",
                    "GraphQLUrl"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "GraphQLApiEndpoint"
                        ]
                    ]
                }
            }
        },
        "GraphQLAPIKeyOutput": {
            "Description": "Your GraphQL API key. Provide via 'x-api-key' header.",
            "Value": {
                "Fn::GetAtt": [
                    "GraphQLAPIKey",
                    "ApiKey"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "GraphQLApiKey"
                        ]
                    ]
                }
            }
        },
        "ElasticSearchStreamingLambdaIAMRoleArn": {
            "Description": "Your lambda function Arn that will stream data from the DynamoDB table to the Elasticsearch Index",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticSearchStreamingLambdaIAMRole",
                    "Arn"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ElasticSearchStreamingLambdaIAMRoleArn"
                        ]
                    ]
                }
            }
        },
        "ElasticSearchAccessIAMRoleArn": {
            "Description": "The IAM Role used to execute queries against the ElasticSearch index.",
            "Value": {
                "Fn::GetAtt": [
                    "ElasticSearchAccessIAMRole",
                    "Arn"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "ElasticSearchAccessIAMRoleArn"
                        ]
                    ]
                }
            }
        }
    }
}