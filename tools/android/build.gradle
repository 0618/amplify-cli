// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: AmplifyTools

/*
********External Plugin***********
 */

class AmplifyTools implements Plugin<Project> {
    static class AmplifyToolsPluginExtension {
        // push is set to true by default since we have an explicit task for push
        Boolean push = true
    }
    void apply(Project project) {
        def amplifyExtension = project.extensions.create('amplify', AmplifyToolsPluginExtension)
        def doesNodeExist = false
        def doesAmplifyCLIExist = false

        def AWSCLOUDFORMATIONCONFIG="""{\
\"configLevel\":\"project\",\
\"useProfile\":true,\
\"profileName\":\"default\"\
}"""
        def AMPLIFY="""{\
\"envName\":\"android\"\
}"""
        def PROVIDERS="""{\
\"awscloudformation\":$AWSCLOUDFORMATIONCONFIG\
}"""

        project.task('verifyNode') {
            try {
                //TODO check if version is <8.6 and ask user to update otherwise
                project.exec {
                    commandLine 'node', '-v'
                }
            } catch (e) {
                doesNodeExist = false
                println("Node is not installed. Please install before using this plugin")
            }
            doesNodeExist = true
        }

        project.task('verifyCli') {
            try {
                project.exec {
                    commandLine 'amplify', '-v'
                }
            } catch (e) {
                doesAmplifyCLIExist = false
            }
            doesAmplifyCLIExist = true
        }

        project.task('installCli') {
            if (doesNodeExist && !doesAmplifyCLIExist) {
                project.exec {
                    commandLine 'npm', 'install', '-g', '@aws-amplify/cli'
                }
            }
        }

        project.task('createSkeleton') {
//            // Incremental build - only creates dirs if they doesn't exist already
//            project.mkdir 'amplify/backend/api/appsyncAPI'
//            project.mkdir 'amplify/backend/auth'
//            project.mkdir 'amplify/backend/function'
//
//            File schema = project.file('amplify/backend/api/appsyncAPI/schema.graphql')
//            if (!schema.exists()) {
//                schema.text = todoSampleSchema
//            }
            project.exec{
                commandLine 'amplify-dev', 'init', '--androidSkeleton'
            }
        }

        project.task('getConfig') {
            doLast {
                def inputConfigFile = project.file('amplify-gradle-config.json')
                def configText = inputConfigFile.text
                def jsonSlurper = new groovy.json.JsonSlurper();
                def configJson = jsonSlurper.parseText(configText)
                def push = configJson.push
                def profile = configJson.profile
                println(push)
                println(profile)
            }
        }

        project.task('executeCodegen') {
            // project.exec {
            //     //TODO command that executes codegen
            //     // commandLine 'amplify', 'codegen'
            // }
            println('****** Execute codegen here ********')
        }

        // TODO init only if local-env-info etc doesn't exist
        project.task('amplifyInitPush') {
            doLast {
                if (amplifyExtension.push) {
                    project.exec {
                        commandLine 'amplify', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'
                    }
                }
            }
        }

        project.task('amplifyPush') {
            doLast {
                if (amplifyExtension.push) {
                    project.exec {
//                        commandLine 'amplify-dev', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'
                        commandLine 'amplify', 'push', '--yes'
                    }
                }
            }
        }

        project.installCli.dependsOn('verifyNode')
        project.installCli.dependsOn('verifyCli')
        project.createSkeleton.dependsOn('installCli')
        project.executeCodegen.dependsOn('createSkeleton')
        project.amplifyPush.dependsOn('executeCodegen')
//        project.amplifyPush.dependsOn('amplifyInit')
    }
}
/*
**********End External Plugin**************
 */


buildscript {
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.amazonaws:aws-android-sdk-appsync-gradle-plugin:2.9.+'
        classpath 'com.android.tools.build:gradle:3.5.0'
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
