// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: AmplifyTools

amplify.push = true
/*
********External Plugin***********
 */

class AmplifyTools implements Plugin<Project> {
    static class AmplifyToolsPluginExtension {
        // push is set to true by default since we have an explicit task for push
        Boolean push = true
    }
    void apply(Project project) {
        def amplifyExtension = project.extensions.create('amplify', AmplifyToolsPluginExtension)
        def doesNodeExist = false
        def doesAmplifyCLIExist = false

        def profile = 'default'
        def accessKeyId = 'headlessaccesskeyid'
        def secretAccessKey = 'headlesssecrectaccesskey'
        def region = 'us-east-1'

        project.task('verifyNode') {
            try {
                //TODO check if version is <8.6 and ask user to update otherwise
                project.exec {
                    commandLine 'node', '-v'
                }
            } catch (e) {
                doesNodeExist = false
                println("Node is not installed. Vist https://nodejs.org/en/download/ to install it")
            }
            doesNodeExist = true
        }

        project.task('verifyCli') {
            try {
                project.exec {
                    commandLine 'amplify', '-v'
                }
            } catch (e) {
                doesAmplifyCLIExist = false
            }
            doesAmplifyCLIExist = true
        }

        project.task('installCli') {
            if (doesNodeExist && !doesAmplifyCLIExist) {
                project.exec {
                    commandLine 'npm', 'install', '-g', '@aws-amplify/cli'
                }
            }
        }

        project.task('createSkeleton') {
            project.exec{
                commandLine 'amplify-dev', 'init', '--androidSkeleton'
            }
        }

        project.task('getConfig') {
            doLast {
                def inputConfigFile = project.file('./amplify-gradle-config.json')
                def configText = inputConfigFile.text
                def jsonSlurper = new groovy.json.JsonSlurper();
                def configJson = jsonSlurper.parseText(configText)
                profile = configJson.profile
                accessKeyId = configJson.accessKeyId
                secretAccessKey = configJson.accessKeyId
                region = configJson.region
            }
        }

        project.task('executeCodegen') {
            // project.exec {
            //     //TODO command that executes codegen
            //     // commandLine 'amplify', 'codegen'
            // }
            println('****** Execute codegen here ********')
        }

        project.task('amplifyPush') {
            def AWSCLOUDFORMATIONCONFIG="""{\
\"configLevel\":\"project\",\
\"useProfile\":true,\
\"profileName\":\"$profile\",\
\"accessKeyId\":\"$accessKeyId\",\
\"secretAccessKey\":\"$secretAccessKey\",\
\"region\":\"$region\"\
}"""

            def AMPLIFY="""{\
\"envName\":\"android\"\
}"""
            def PROVIDERS="""{\
\"awscloudformation\":$AWSCLOUDFORMATIONCONFIG\
}"""
            doLast {
                if (amplifyExtension.push) {
                    def doesLocalEnvExist = project.file('./amplify/.config/local-env-info.json').exists()
                    if (doesLocalEnvExist) {
                        project.exec {
                            commandLine 'amplify', 'push', '--yes'
                        }
                    } else {
                        project.exec {
                            commandLine 'amplify-dev', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'
                        }
                    }
                } else {
                    println('Amplify push set to false')
                }
            }
        }

        project.installCli.mustRunAfter('verifyNode')
        project.installCli.mustRunAfter('verifyCli')
        project.createSkeleton.mustRunAfter('installCli')
        project.executeCodegen.mustRunAfter('createSkeleton')
        project.getConfig.mustRunAfter('createSkeleton')
        project.amplifyPush.mustRunAfter('executeCodegen')
        project.amplifyPush.mustRunAfter('getConfig')
    }
}
/*
**********End External Plugin**************
 */