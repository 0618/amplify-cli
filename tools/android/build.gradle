// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: AmplifyTools

/*
********External Plugin***********
 */

class AmplifyTools implements Plugin<Project> {
    static class AmplifyToolsPluginExtension {
        // push is set to true by default since we have an explicit task for push
        Boolean push = true
    }
    void apply(Project project) {
        def amplifyExtension = project.extensions.create('amplify', AmplifyToolsPluginExtension)
        def doesNodeExist = false

        def profile = 'default'
        def accessKeyId = null
        def secretAccessKey = null
        def region = null
        def envName = null

        project.task('verifyNode') {
            try {
                project.exec {
                    commandLine 'which', 'node'
                    standardOutput = new ByteArrayOutputStream()
                }
            } catch (e) {
                doesNodeExist = false
                println("Node is not installed. Vist https://nodejs.org/en/download/ to install it")
            }
            doesNodeExist = true
        }

        project.task('createAmplifyApp') {
            if (doesNodeExist) {
                project.exec {
                    commandLine 'npx', 'create-amplify-app', '--platform', 'android'
                }
            }
        }

        project.task('getConfig') {
            def inputConfigFile = project.file('./amplify-gradle-config.json')
            def configText = inputConfigFile.text
            def jsonSlurper = new groovy.json.JsonSlurper();
            def configJson = jsonSlurper.parseText(configText)
            profile = configJson.profile
            accessKeyId = configJson.accessKeyId
            secretAccessKey = configJson.secretAccessKeyId
            region = configJson.region
            envName = configJson.envName
        }

        project.task('amplifyPush') {
            def AWSCLOUDFORMATIONCONFIG
            if (!accessKeyId || !secretAccessKey || !region) {
                AWSCLOUDFORMATIONCONFIG="""{\
\"configLevel\":\"project\",\
\"useProfile\":true,\
\"profileName\":\"$profile\"\
}"""
            } else {
                AWSCLOUDFORMATIONCONFIG="""{\
\"configLevel\":\"project\",\
\"useProfile\":true,\
\"profileName\":\"$profile\",\
\"accessKeyId\":\"$accessKeyId\",\
\"secretAccessKey\":\"$secretAccessKey\",\
\"region\":\"$region\"\
}"""
            }

            def AMPLIFY
            if (!envName) {
                AMPLIFY="""{\
\"envName\":\"amplify\"\
}"""
            } else {
                AMPLIFY="""{\
\"envName\":\"$envName\"\
}"""
            }

            def PROVIDERS="""{\
\"awscloudformation\":$AWSCLOUDFORMATIONCONFIG\
}"""

            doLast {
                if (amplifyExtension.push) {
                    def doesLocalEnvExist = project.file('./amplify/.config/local-env-info.json').exists()
                    if (doesLocalEnvExist) {
                        project.exec {
                            commandLine 'amplify-dev', 'push', '--yes'
                        }
                    } else {
                        project.exec {
                            commandLine 'amplify-dev', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'
                        }
                    }
                } else {
                    println('Amplify push set to false')
                }
            }
        }
        project.createAmplifyApp.mustRunAfter('verifyNode')
        project.getConfig.mustRunAfter('createAmplifyApp')
        project.amplifyPush.mustRunAfter('getConfig')

    }
}
/*
**********End External Plugin**************
 */
